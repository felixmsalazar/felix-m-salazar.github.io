from symbol import comparison, factor
import pandas as pd
import random as rand
from math import sqrt
import numpy as np
import matplotlib.pyplot as plt
from xbbg import blp, pipeline
import bql
from matplotlib.lines import Line2D
from matplotlib.patches import Patch
from pandas.tseries.offsets import BMonthEnd
from pandas.tseries.offsets import BDay
from datetime import date
import datetime
from dateutil.relativedelta import relativedelta
import time
from matplotlib.pyplot import figure
from tqdm import tqdm

### README START ###

This code implements a portfolio analysis tool focusing on currency hedging and yield calculations for fixed income securities. 

Key features include:
Data retrieval from Bloomberg using BQL (Bloomberg Query Language) and XBBG libraries.
Calculation of currency hedging costs and contributions for a given portfolio.
Handling of both regular currencies and non-deliverable forwards (NDFs).
Computation of weighted average yield and duration for the portfolio.
Integration of FX hedging contributions to calculate a hedged yield.
Generation of detailed portfolio metrics and FX hedging contribution reports.

The tool demonstrates financial modeling skills, particularly in:
Fixed income portfolio analysis
Currency hedging strategies
Bloomberg API integration
Data manipulation using pandas

Showcases proficiency in working with complex financial instruments, API integration, and implementing
sophisticated portfolio management techniques. The code's ability to handle various currency types and calculate 
hedged yields reflects a deep understanding of international fixed income markets and currency risk management.

Designed to be run as an executable or from a terminal (input function)

### README END ###

currency_dict={}

funding_rate='SOFR90A Index'

hedge=''

fwd_tenor_months=1

ndf_dict={'CLP':'CHN','PEN':'PSN','IDR':'IHN','COP':'CLN','KRW':'KWN','MYR':'MRN','CNY':'CNH'}

today=date.today()

bbg_today=today.strftime("%Y-%m-%d")

bbg_fx=today-BDay(1)

bbg_today=today.strftime("%Y-%m-%d")

bbg_fx=bbg_fx.strftime("%Y-%m-%d")

bq = bql.Service()

#ticker='AGGU LN Equity'

ticker=input('input BBG Market Ticker: ')

univ = bq.univ.holdings(ticker)

currency = bq.data.crncy()

weights = bq.data.id()['weights']

summed_weights = weights.group(currency).sum()['value']

req = bql.Request(univ, summed_weights)

res = bq.execute(req)

df = res[0].df()

try:

  df=df.drop('NullGroup')

except:

  pass

for currency in df.index:

  if currency=='USD' and hedge=='':
        
    currency_dict[currency]='HC'
    
  elif currency in ndf_dict.keys():
        
    currency_dict[currency]=round((((1+blp.bdh(tickers=ndf_dict[currency]+hedge+'I'+str(fwd_tenor_months)+'M Curncy', flds=['PX_CLOSE_1D'], start_date=bbg_today, end_date=bbg_today).iloc[0][0]/100)/(1+(blp.bdh(tickers=funding_rate, flds=['PX_CLOSE_1D'], start_date=bbg_today, end_date=bbg_today).iloc[0][0])/100)-1)*100),2)
    
  else:                    
   
    currency_dict[currency]=round((((1+blp.bdh(tickers=currency+hedge+'I'+str(fwd_tenor_months)+'M Curncy', flds=['PX_CLOSE_1D'], start_date=bbg_today, end_date=bbg_today).iloc[0][0]/100)/(1+(blp.bdh(tickers=funding_rate, flds=['PX_CLOSE_1D'], start_date=bbg_today, end_date=bbg_today).iloc[0][0])/100)-1)*100),2)

df['carry/cost']=currency_dict.values()

df['carry/cost']=df['carry/cost']*(-1)

df=df[df['carry/cost']!='']

df[df.columns[0]]=df[df.columns[0]]/100

df['weighted fx contribution']=df[df.columns[0]]*df['carry/cost']

hedge_contribution=df['weighted fx contribution'].sum()

hedge_contribution=round(hedge_contribution,2)

holdings = bq.univ.holdings(ticker)

bql_yield = bq.data.yield_()['value']

duration = bq.data.duration()['value']

weights = bq.data.id()['weights']

wavg_yield = bq.func.wavg(bq.func.group(bql_yield), bq.func.group(weights))['value']

wavg_duration = bq.func.wavg(bq.func.group(duration), bq.func.group(weights))['value']

flds = {}

flds['Weighted Average YTM'] = wavg_yield

flds['Weighted Average Duration'] = wavg_duration

req = bql.Request(holdings, flds)

res = bq.execute(req)

port = pd.concat([r.df() for r in res], axis=1)

port['FX Hedged Contribution']=hedge_contribution

port['Weighted Average Hedged Yield']=port['Weighted Average YTM'][0]+hedge_contribution

port['Ticker']=ticker

port=port.reset_index(drop=True)

port=port.set_index('Ticker')

port=round(port,2)

port.to_csv(f'{ticker}_Portfolio_Metrics.csv')

df.rename(columns={ df.columns[0]: 'Weight ' }, inplace = True)

df.index=df.index.rename('Base Currencies')

df=round(df,2)

df.to_csv(f'{ticker}_FX_Hedging_Portfolio_Contributions.csv')

print(port)

print(df)

