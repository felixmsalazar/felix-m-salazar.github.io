import bql
import pandas as pd
import datetime as dt
from dateutil.relativedelta import relativedelta
import numpy as np
from xbbg import blp, pipeline
from pandas.tseries.offsets import BDay
from typing import Optional
import sys
import os

today = dt.date.today()

bq = bql.Service()

premia_df = pd.read_csv(f"U:\sov_premia.csv")

premia_df = premia_df.set_index('asofdate')

countries = {'India':{'FX':'INR Curncy'}}

fx_dict = {'INR Curncy':'INBGFCPI Index'}

countries['India']['FX']

fx_dict[countries['India']['FX']]

# FX 

def calculate_implicit_fx(inflation_change,end_date,base_fx,override):
    
    inflation_change_copy=inflation_change.copy(deep=True)
    
    start_inflation_change=inflation_change_copy[:end_date]
    
    end_inflation_change=inflation_change_copy[end_date:]
    
    start_inflation_change.iloc[-1]=base_fx
    
    end_inflation_change.iloc[0]=base_fx
    
    end_implied_fx_lst=[]
    
    for x in range(len(end_inflation_change)):
    
        if x==0:
    
            end_implied_fx_lst.append(end_inflation_change.iloc[x][0])
    
        else:
    
            end_implied_fx_lst.append(end_implied_fx_lst[x-1]*(1+end_inflation_change.iloc[x])[0])
    
    start_implied_fx_lst=[]
    
    start_inflation_change=start_inflation_change.iloc[::-1]
    
    for x in range(len(start_inflation_change)):
    
        if x==0:
    
            start_implied_fx_lst.append(start_inflation_change.iloc[x][0])
    
        else:
    
            start_implied_fx_lst.append(start_implied_fx_lst[x-1]*(1-start_inflation_change.iloc[x])[0])
    
    start_implied_fx_lst.reverse()
    
    if override!='manual':
    
        end_implied_fx_lst.pop(0)
    
    else:
    
        pass
    
    implied_fx=start_implied_fx_lst+end_implied_fx_lst
    
    return(start_inflation_change,end_inflation_change,implied_fx,start_implied_fx_lst,end_implied_fx_lst,start_inflation_change)

class Base:
    
    def __init__(self, start_date: str, end_date: str, fx: float):
    
        self.start_date = start_date
    
        self.end_date = end_date
    
        self.fx = fx
    
        self._implicit_fx_series: Optional[float] = None  # Use None to indicate unset value

    @property
    
    def implicit_fx_series(self) -> Optional[float]:
    
        return self._implicit_fx_series

    @implicit_fx_series.setter
    
    def implicit_fx_series(self, value: float):
    
        self._implicit_fx_series = value

currencies={'EUR Curncy':'EACPI Index','GBP Curncy':'UKRPCHVJ Index',
            'MXN Curncy':'MXCPI Index','BRL Curncy':'BZPIIPCA Index',
            'PEN Curncy':'PRCPI Index','COP Curncy':'COCPI Index','CRC Curncy':'CRCII Index',
            'UYU Curncy':'ECOPUYN Index','PLN Curncy':'POCPINDX Index','HUF Curncy':'CPALHU Index',
            'CZK Curncy':'CPALCZ Index','TRY Curncy':'CPALTR Index',
            'ZAR Curncy':'SACPI Index','CLP Curncy':'CHUF Index','JPY Curncy':'JNCPIMOM Index',
            'CNY REGN Curncy':'CNCPI4 Index','RON Curncy':'ROCOPMOM Index','IDR Curncy':'IDCPIM Index','MYR Curncy':'MACPIYOY Index',
            }

local_rates={'EUR Curncy':'EUDR1T CMPN Curncy','GBP Curncy':'UKBRBASE Index',
             'MXN Curncy':'MXONBR Index','BRL Curncy':'BZSELICA Index','CLP Curncy':'CHIBPROM Index',
             'PEN Curncy':'PRRRONUS Index','COP Curncy':'COOVIBR Index',
             'UYU Curncy':'URDAMPR Index','PLN Curncy':'POREANN Index',
             'HUF Curncy':'HBBRANN Index','CZK Curncy':'CZEOINDX Index',
             'TRY Curncy':'TUBR1WRA Index','ZAR Curncy':'ZARONIA Index','CLP Curncy':'CHOVCHOV Index',
             'JPY Curncy':'MUTKCALM Index','CNY Curncy':'CNDSC Index','RON Curncy':'BUBRON Index','IDR Curncy':'IDBIRRPO Index',
             'MYR Curncy':'MAOPRATE Index'}

def currency_rv(currency):

    index_construction='no'

    # Assets in USD so US inflation

    base_inf = 'CPI INDX Index'

    # Attempt to get the currency information
    
    try:
        
        comp_inf = fx_dict[countries[currency]['FX']]
    
    except KeyError:

        print(f'{currency} is not supported. Program update is required.')

    # Define dates

    start_date = '1999-12-31'

    end_date = (dt.date.today() - BDay(1)).strftime('%Y-%m-%d')

    grouping = 12

    # Fetch FX data

    fx = blp.bdh(tickers=countries[currency]['FX'], flds=['Last_Price'], start_date=start_date, end_date=end_date, Per='M')

    fx.columns = fx.columns.droplevel()  # Drop the first level of columns

    # Call inflation data (monthly change index)

    base_inflation = blp.bdh(tickers=base_inf, flds=['Last_Price'], start_date=start_date, end_date=end_date)

    # Resample if daily frequency is detected

    if pd.infer_freq(base_inflation.index) == 'D':

        base_inflation.index = pd.to_datetime(base_inflation.index)

        base_inflation = base_inflation.resample('1M').mean()

    # Fetch component inflation data

    comp_inflation = blp.bdh(tickers=comp_inf, flds=['Last_Price'], start_date=start_date, end_date=end_date)

    comp_inflation.columns = comp_inflation.columns.droplevel()

    comp_inflation /= 100  # Convert to percentage

    # Calculate implied inflation index using cumulative product

    if index_construction == 'yes':

        comp_inflation['Last_Price'] = (1 + comp_inflation['Last_Price']).cumprod() * 100

    # Resample if daily frequency is detected

    if pd.infer_freq(comp_inflation.index) == 'D':

        comp_inflation.index = pd.to_datetime(comp_inflation.index)

        comp_inflation = comp_inflation.resample('1M').mean()

    # Ensure both DataFrames are the same length by trimming the longer one

    min_length = min(len(base_inflation), len(comp_inflation))

    base_inflation = base_inflation.head(min_length)

    comp_inflation = comp_inflation.head(min_length)

    # Calculate percentage changes

    base_inflation = base_inflation.pct_change()

    comp_inflation = comp_inflation.pct_change()

    # Reset index and drop level 0 of MultiIndex if necessary

    base_inflation_ex_index = base_inflation.reset_index(drop=True)

    comp_inflation_ex_index = comp_inflation.reset_index(drop=True)

    base_inflation_ex_index.columns = base_inflation_ex_index.columns.droplevel() if hasattr(base_inflation_ex_index.columns, 'droplevel') else base_inflation_ex_index.columns
    
    #comp_inflation_ex_index.columns = comp_inflation_ex_index.columns.droplevel() if hasattr(comp_inflation_ex_index.columns, 'droplevel') else comp_inflation_ex_index.columns

    # Create series of component inflation minus base inflation
    
    inflation_change = comp_inflation_ex_index['Last_Price'] - base_inflation_ex_index['Last_Price']
    
    inflation_change = inflation_change.to_frame(name='Inflation_Change')
    
    inflation_change['Date'] = base_inflation.index
    
    inflation_change.set_index('Date', inplace=True)

    # Remove the first row if necessary (due to pct_change)
    
    inflation_change = inflation_change.tail(-1)
    
    inflation_change.index = pd.to_datetime(inflation_change.index)

    # Calculate percentage change and convert to DataFrame
    
    fx_change = fx[fx.columns[0]].pct_change().to_frame()

    # Set index to datetime and drop the first row (NaN from pct_change)
    
    fx_change.index = pd.to_datetime(fx_change.index)
    
    fx_change = fx_change.iloc[1:]  # Drop the first entry directly

    # Group by month and calculate mean
    
    grouped_fx = fx_change.groupby(pd.Grouper(freq=f'{grouping}MS')).mean().abs()
    
    fx_change_median = grouped_fx.median()

    # Initialize dictionaries
    
    best_fit_dates = {}
    
    bases = {}

    # Find lowest FX changes
    
    lowest_fx_change = grouped_fx.loc[grouped_fx['Last_Price'] < fx_change_median[0]]

    # Create Base instances for each qualifying date using a list comprehension
    
    for row in lowest_fx_change.index:
    
        first_match_date = row - relativedelta(months=grouping)
    
        end_date = row.strftime('%Y-%m')
    
        first_date = first_match_date.strftime('%Y-%m')
        
        # Fetch mean Last_Price and create Base instance
    
        mean_last_price = blp.bdh(tickers=countries[currency]['FX'], flds=['Last_Price'], start_date=first_date, end_date=end_date, Per='M').mean()[0]
    
        bases[end_date] = Base(first_date, end_date, mean_last_price)

    # Assign implicit FX series to each Base instance
    
    for value in bases.values():
    
        value.implicit_fx_series = calculate_implicit_fx(inflation_change, value.end_date, value.fx, '')  # Use implicit_fx_series instead of implicit_fx

    ##### CHECK BECAUSE WHEN REBASING, DATE PRIOR TO REBASE DATE MAPPED ONLY AS %

    # Adjust fx DataFrame based on the length of value.implicit_fx_series[2]
    
    for value in bases.values():
    
        while len(value.implicit_fx_series[2]) < len(fx):
    
            last_index_value = value.implicit_fx_series[1].index[-1].to_pydatetime()
    
            last_index_fx = dt.datetime.combine(fx.index[-1], dt.datetime.min.time())
            
            # Adjust fx DataFrame based on index comparison
    
            if last_index_value == last_index_fx:
    
                fx = fx.iloc[:-1]  # Remove the last row
    
            else:
    
                fx = fx.iloc[1:]   # Remove the first row

    # Assign implied FX series to FX DataFrame
    
    for value in bases.values():
    
        fx[f'{value.end_date} Base Implied'] = value.implicit_fx_series[2]

    averages_df=fx.loc[:, fx.columns != fx.columns[0]]
    
    max_df=averages_df.tail(1)
    
    max_df=max_df.transpose()
    
    max_df=max_df.sort_values(by=max_df.columns[0], ascending=False)
    
    max_base=max_df.index[0]
    
    min_df=averages_df.tail(1)
    
    min_df=min_df.transpose()
    
    min_df=min_df.sort_values(by=min_df.columns[0], ascending=True)
    
    min_base=min_df.index[0]
    
    averages_df[[min_base,max_base]]
    
    averages_df['average']=averages_df.mean(axis=1)
    
    fx['Average Program Fit Implied FX']=averages_df['average']
    
    #fx[f'{manual_end_date_title} Base Implied']=manual_implicit
    
    fx=fx[['Last_Price',min_base,max_base,'Average Program Fit Implied FX']]
    
    fx=fx.rename(columns={'Last_Price':'Real Spot FX'})
    
    #fx.to_csv(f'C:\\Users\\fsalazar\\fx_ppp_model_{currency}.csv',encoding='utf-8-sig', index=True)
    
    fx=fx.round(3)
    
    fx.index=pd.to_datetime(fx.index)
    
    return fx
